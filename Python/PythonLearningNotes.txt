Python indentation : it refers to the spaces at beginning of a code line to indicate a block of code 
    python will give you error if we skip indentation 

comments: 
    purpose of comments in python is to use in documentation 
    it starts with # for single line and ''' or """ for multi line comments 
    comments will be used to explain the code and it makes code more readable and to prevent execution when testing code.

Variables: 
    variables are created when you assign a value to it 
    variables are containers for storing data values.
    A varibale is created the moment you first assign a value to it.
    variable do not need to be declared with any particular type and can even change type after they set.
    to get type of the variable we will use in built function type()
    variable names are case-sensitive
Rules for variables: 
    it must start with a letter or underscore char
    it cannot start with a number 
    it can only contain alpha numeric char and underscores(A-Z, a-z, 0-9, _)
    these cannot be any of the python keywords

important points in variables:
    python allows you to assign values to multiple variables in one line and no of values should match no of variables 
    we can assign same value to multiple variables in one line 

unpack a collection 
    if you have a collection of values in a list or tuple python allows 
    you to extract values into variables. this is called unpacking.

Output variables using print():
    print() is often used to output variables.
    output multiple variables seperated by a comma.
    we can use + operator to output multiple variables.

Global Variables:
    variables that are created outside of a function.
    these can be used by everyone both inside of function and outside.
    if you create a variable with same name inside a function this variable will be local 
    and can only be used inside function.
    the global variable with same name will remain as it was global and with original value.

    normally when you create a variable inside a function that variable is local and can only be used inside that function.
    to create a global variable inside a function we need to use global keyword.


Built in Data Types:
    Numeric : int, float, complex
    sequence type: list, tuple, range
    mapping type: dict
    set type : set, frozenset
    boolean type: boolean
    binary type: bytes, bytearray, memoryview
    Nonetype: nonetype

Numbers:
    int: it is a whole number positive, negative without decimals of unlimited length
    float: it is a number positive, negative containing one or more decimals
    complex: these are numbers written with a "j" as the imaginary particular

Random Number: python does not have a random() function to make a random number but python has built in module 
    called random that can be used to make random numbers.

Strings: 
    strings in python are surrounded by either single quotation marks or double qoutation marks.
    we can use qoutes inside a string as long as they dont match the qoutes surrounding the string.

Strings are arrays: 
    python does not have a character datatype a single char is simply string with leng 1.
    square brackets can be used to access elements of string
            a  = "Hello world"
            print(a[1])
Looping through a string:
    since strings are arrays we can loop through the characters in a string with a for loop.
            for x in "banana":
                print(x)
String length: 
    use len()
        print(len(a))

Check string: to check certain char/substring in string we use in keyword.
    print("is" in a)

    if "is" in a:
        print("yes its there")

Check if not: to check certain char/substring is not in string we use not in keywords.
    print("is" not in a)

    if "is" not in a:
        print("yes its not there")

Slicing: it will return range of char by using slice syntax.
    specify start,end index seperated by colon to return a part of the string.
                print(a[2:4])

Slice from start: giving only end index it will take start index as 0 
        print(a[:5])
Slice to the end: giving only start index it will consider end will be last index.
        print(a[2:])
negative index: usage negative index to start the slice from end of the string.
        printa[-5:-2]


Modify strings: it has a set of built in methods that we can use on strings.
    upper() : returns the string in upper case
                    print(a.upper())
    lower() : returns the string in lower case 
                    print(a.lower())

    strip() : removes any whitespaces from the beginning or the end.
                    print(a.strip())

    replace() : replaces a string with another string.
                    print(a.replace("h", "J"))
    split(): returns a list where the text between the specified seperator becomes the list items.
                print(a.split())
    
String Concatenation:
    + operator : combine 2 strings  
                    print(a+b)

Format Strings: 
    F Strings: it was introduced in python 3.6 and is now the preferred way of formatting strings.
            txt = f " my name is amulya age is {age}"
            print(txt)

    
    placeholders and modifiers:
        a placeholder can containt variables, operations, functions and modifiers to format the value.
        A placeholder can include a modifier to format the value
        A modifier is included by adding a colon : followed by a legal formatting type like .2f which means fixed point number with 2 decimals.

    Escape Character:
        \' -> single qoute
        \\ -> backslash
        \n -> new line 
        \r -> carriage return 
        \t -> tab
        \b -> backspace
        \f -> form feed
        \ooo -> octal value
        \xhh -> hex value

String methods : 
capitalize() : converts the first char to upper case
casefold() : converts string into lower case 
center(): returns a centered string 
count(): returns the no of times a specified value occurs in a string 
encode(): returns an encoded version of the string 
endswith(): returns true if the string ends with specified value.
expandtabs(): sets the tab size of the string 
find(): searchs the string for a specified value and returns the position of where it was found 
format():format specified values in string 
format_map(): format specified values in a string 
index():searched the string for a specified value and returns the position of where it was found 
isalnum(): checks string is alphanumeric or not returns true / false 
isalpha(): checks string is alphabets or not returns true/false
isascii(): checks the string are ascii char and return true/false 
isdecimal(): check string are decimals 
isdigit(): check strings are digits
isidentifier(): chekc strings are isidentifier
islower(): return true if all char in string are lower case 
isnumeric():returns true if all char in string are number 
isprintable():return true if all char in string are printable 
isspace(): return true if all char in string are spaces 
istitle(): return true if string follows the rules of title
isupper(): return true if all char in string are upper case 
islower(): return true if all char in string are lower case 
join(): joins the elements of an iterable to the end of the string 
ljust(): returns a left justified version of string 
lower(): converts a string into lower case 
lstrip(): returns a left trim version of the string 
maketrans(): returns a translation table to be used in translations
partition(): returns a tuple where the string is parted into 3 parts
replace(): returns a string where a specified value is replaced with a specified value.
rfind(): searched the string for a specified value and returns the last position of where it was found 
rindex(): searched the string for a specified value and returns the last position of where it was found.
rjust(): returns a right justified version of the string
rpartition(): return tuple where the string is parted into 3 parts
rsplit(): splits the string at specified seperator and returns a list
sptrip():returns a right trim version of string 
split():splits the string at the specified seperator and returns a list 
splitlines(): splits the string at line break and returns a list 
startswith(): returns true if the string starts with specified value
strip(): returns a trimmed version of string 
swapcase(): swaps cases lower case becomes upper case and viceversa
title(): converts the first char of each word to upper case 
translate(): returns a translated string
upper(): converts a string to upper case 
zfill(): fill the string with a specified number of 0 value at the beginning


Booleans:
    boolean represent with true and false
    when you compare 2 values the expression is evaluated and python returns boolean
    when you run a condition in an if statement python returns true or false
    bool() allows you to evaluate any value and give you true or false in return 
    Almost any value is True if it has some sort of content
    Any String is True except empty strings
    Any number is True except 0
    Any list, tuple, set and dictionary are True except empty operations

    in fact there are not many values that evaluate to False except empty values such as (), [],{},"", 0, None, False.
    if you have an object that is made from a class with __len__ function that returns 0 or False

    isinstance() : this returns boolean values and this can be used to determine if an object is of a certain datatype.



Operators: 
    these are used to perform operations on variables and values 

    Arithmetic operators ==> +, -, *, /, %, **, //
    Assignment operators ==> =, +=, -=, *=, /=, %=, //=,**=, &=, |=, ^=, >>=, <<=, :=
    Comparison operators ==> ==, !=, >, <, >=, <=
    Logical Operator ==> and, or, not
    Identity Operator ==> is, isnot
    Membership operator ==> in, not in
    Bitwise Operator ==> &-AND, |-OR, ^-XOR, ~-NOT, <<-Zero fill left shift, >>-Signed right shift
    Opertor Precedence ==>(), **, +x, -X, ~x, *, /, //, %, +, -, <<, >>, &, ^, |, ==, !=, >, >=, <, <=, is, is not, in, not in, not, and, or.


